AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  SAM Template for Serverless API(s)

Parameters:
  Env:
    Description: Deploying environment
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
  CORSOrigin:
    Description: CORS Allowed Origin
    Type: String

Conditions:
  IsProductionEnvCondition: !Equals [!Ref Env, "prod"]

Mappings:
  EnvSettings:
    dev:
      LogRetentionInDays: 14 # 2 weeks
    prod:
      LogRetentionInDays: 90 # 3 months

Globals:
  Api:
    OpenApiVersion: 3.0.1
  Function:
    Runtime: python3.13
    MemorySize: 128
    Timeout: 15
    Architectures:
      - x86_64
    Environment:
      Variables:
        ENVIRONMENT: !Ref Env
        REGION: !Sub ${AWS::Region}
        CORS_ORIGIN: !Ref CORSOrigin

Resources:
  # --------------------------------------------------------------------------------- Lambda Layers
  SLAPowertoolsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: sla-powertools-layer
      Description: "Lambda Layer with Powertools developer toolkit"
      ContentUri: src/layers/powertools_layer/
      CompatibleRuntimes:
        - python3.13
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: python3.13

  SLAAuthLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: sla-auth-layer
      Description: "Lambda Layer for Auth tools"
      ContentUri: src/layers/auth_layer/
      CompatibleRuntimes:
        - python3.13
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: python3.13

  # --------------------------------------------------------------------- Service APIs (ApiGateway)
  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayLoggingRole.Arn

  ApiGatewayLoggingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  ServerlessApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "Serverless-API-${Env}"
      StageName: !If [IsProductionEnvCondition, "api", !Sub "${Env}-api"]
      Cors:
        AllowMethods: "'OPTIONS,GET,POST,PUT,PATCH,DELETE'"
        AllowHeaders: "'Content-Type,Content-Language,Accept,Accept-Language,Accept-Encoding,Range,Origin,Cookie'"
        AllowOrigin: !Ref CORSOrigin
        AllowCredentials: true
      CacheClusterEnabled: false
      Auth:
        # --- Authorization using Cognito User Pool
        # DefaultAuthorizer: CognitoAuthorizer
        # Authorizers:
        #   CognitoAuthorizer:
        #     UserPoolArn: !GetAtt MyCognitoUserPool.Arn
        #     Identity:
        #       Header: Authorization # Bearer <token>

        # --- Authorization using custom Lambda authorizer
        # DefaultAuthorizer: LambdaAuthorizer
        # Authorizers:
        #   LambdaAuthorizer:
        #    FunctionPayloadType: REQUEST
        #    FunctionArn: !GetAtt CustomAuthorizerFunction.Arn
        #    Identity:
        #      Headers:
        #        - Authorization

        UsagePlan:
          CreateUsagePlan: PER_API
          UsagePlanName:
            !Join ["", [{ "Ref": "AWS::StackName" }, "-usage-plan"]]
          Quota:
            Limit: 10000
            Period: WEEK

  ServerlessApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/${ServerlessApi}"
      RetentionInDays: !FindInMap [EnvSettings, !Ref Env, LogRetentionInDays]

  # -------------------------------------------------------------------------------- Lambda Role(s)
  SLABaseLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "sla-base-lambda-execution-role-${Env}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SLADynamoDBAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              # Access to DynamoDB table 'demo-table-<Env>'
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/sla-*-${Env}"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/sla-*-${Env}/index/*"
              # Access to SSM parameters and KMS decryption
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:GetParametersByPath
                  - kms:Decrypt
                Resource:
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${Env}/*"
                  - !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*"
              # Allow invoking other Lambda functions
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource:
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*"

  # ----------------------------------------------------------- Lambda authorizer
  CustomAuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "sla-authorizer-fn-${Env}"
      CodeUri: src/lambda/functions/authorizer/
      Handler: app.lambda_handler
      Role: !GetAtt SLABaseLambdaExecutionRole.Arn

  CustomAuthorizerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/sla-authorizer-fn-${Env}"
      RetentionInDays: !FindInMap [EnvSettings, !Ref Env, LogRetentionInDays]

  # --------------------------------------------------------------- Lambda functions - Auth
  SLAAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "sla-auth-fn-${Env}"
      CodeUri: src/lambda/functions/api/auth/base/
      Handler: app.lambda_handler
      Role: !GetAtt SLABaseLambdaExecutionRole.Arn
      Layers:
        - !Ref SLAPowertoolsLayer
        - !Ref SLAAuthLayer
      # AutoPublishAlias: live
      # ProvisionedConcurrencyConfig:
      #   ProvisionedConcurrentExecutions: !If [IsProductionEnvCondition, 2, 1]
      Events:
        Session:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessApi
            Path: /v1/auth/session
            Method: POST
            Auth:
              ApiKeyRequired: true
        CredsSignUp:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessApi
            Path: /v1/auth/creds/sign_up
            Method: POST
        CredsLogIn:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessApi
            Path: /v1/auth/creds/log_in
            Method: POST
        SSOSignUp:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessApi
            Path: /v1/auth/sso/{provider}/sign_up
            Method: POST
            Auth:
              ApiKeyRequired: true
        SSOLogIn:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessApi
            Path: /v1/auth/sso/{provider}/log_in
            Method: POST
            Auth:
              ApiKeyRequired: true
      Environment:
        Variables:
          POWERTOOLS_PARAMETERS_MAX_AGE: 900

  SLAAuthFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/sla-auth-fn-${Env}"
      RetentionInDays: !FindInMap [ EnvSettings, !Ref Env, LogRetentionInDays ]

  SLAEmailVerificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "sla-email-verification-fn-${Env}"
      CodeUri: src/lambda/functions/api/auth/email_verification/
      Handler: app.lambda_handler
      Role: !GetAtt SLABaseLambdaExecutionRole.Arn
      Layers:
        - !Ref SLAPowertoolsLayer
        - !Ref SLAAuthLayer
      Events:
        SendVerificationEmail:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessApi
            Path: /v1/auth/creds/email/send_verification
            Method: POST
            Auth:
              ApiKeyRequired: true
        ConfirmEmail:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessApi
            Path: /v1/auth/creds/email/confirm
            Method: POST

  SLAEmailVerificationFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/sla-email-verification-fn-${Env}"
      RetentionInDays: !FindInMap [EnvSettings, !Ref Env, LogRetentionInDays]

  SLAPasswordManagerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "sla-password-manager-fn-${Env}"
      CodeUri: src/lambda/functions/api/auth/password_manager/
      Handler: app.lambda_handler
      Role: !GetAtt SLABaseLambdaExecutionRole.Arn
      Layers:
        - !Ref SLAPowertoolsLayer
        - !Ref SLAAuthLayer
      Events:
        PasswordReset:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessApi
            Path: /v1/auth/creds/password/reset
            Method: POST
        PasswordSet:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessApi
            Path: /v1/auth/creds/password/set
            Method: POST
        PasswordChange:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessApi
            Path: /v1/auth/creds/password/change
            Method: POST
        PasswordCreate:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessApi
            Path: /v1/auth/creds/password/create
            Method: POST
        PasswordConfirm:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessApi
            Path: /v1/auth/creds/password/confirm
            Method: POST
            Auth:
              ApiKeyRequired: true

  SLAPasswordManagerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/sla-password-manager-fn-${Env}"
      RetentionInDays: !FindInMap [EnvSettings, !Ref Env, LogRetentionInDays]

  # --------------------------------------------------------------- Lambda functions - User
  SlaUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "sla-user-fn-${Env}"
      CodeUri: src/lambda/functions/api/user/
      Handler: app.lambda_handler
      Role: !GetAtt SLABaseLambdaExecutionRole.Arn
      Layers:
        - !Ref SLAPowertoolsLayer
        - !Ref SLAAuthLayer
      Events:
        SecretEndpoint:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessApi
            Path: /v1/user
            Method: GET
            Auth:
              ApiKeyRequired: true

  SlaUserFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/sla-user-fn-${Env}"
      RetentionInDays: !FindInMap [EnvSettings, !Ref Env, LogRetentionInDays]

  # --------------------------------------------------------------- Lambda functions - Scheduled
  SLAScheduledFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "sla-scheduled-fn-${Env}"
      CodeUri: src/lambda/functions/schedule/
      Handler: demo.lambda_handler
      Role: !GetAtt SLABaseLambdaExecutionRole.Arn
      Layers:
        - !Ref SLAPowertoolsLayer
      Events:
        EveryWeekAtMonday:
          Type: ScheduleV2  # EventBridge Scheduler
          Properties:
            Name: !Sub "sla-schedule-every-week-at-monday-${Env}"
            ScheduleExpression: cron(0 0 ? * 1 *) # Every Monday at 00:00 UTC
            ScheduleExpressionTimezone: UTC
          RetryPolicy:
            MaximumRetryAttempts: 3

  SLAScheduledFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/sla-scheduled-fn-${Env}"
      RetentionInDays: !FindInMap [EnvSettings, !Ref Env, LogRetentionInDays]

Outputs:
  ServerlessApiUrlOutput:
    Description: "URL of the Serverless API #1"
    Value: !If
      - IsProductionEnvCondition
      - !Sub "https://${ServerlessApi}.execute-api.${AWS::Region}.amazonaws.com/api/v1/"
      - !Sub "https://${ServerlessApi}.execute-api.${AWS::Region}.amazonaws.com/${Env}-api/v1/"

  SLAPowertoolsLayerOutput:
    Description: "ARN for Powertools Lambda Layer"
    Value: !Ref SLAPowertoolsLayer

  SLAAuthLayerOutput:
    Description: "ARN for Auth Lambda Layer"
    Value: !Ref SLAAuthLayer
